{"version":3,"sources":["../../../../../src/tests/routes/api/profile/profile.test.js"],"names":["request","require","mongoose","describe","process","env","API_BASE","userApiBase","profileApiBase","access_token","beforeEach","Profile","deleteMany","User","app","post","send","username","email","password","confirmPassword","expect","res","body","token","afterAll","done","connection","close","it","set","bio","firstName","lastName","youtube","instagram","twitter","avatar","response","toBe","get","error"],"mappings":"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","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../../index';\r\nimport Profile from '../../../../models/Profile';\r\nimport User from '../../../../models/User';\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('Tests for managing the user profile', () => {\r\n    process.env.API_BASE = '/api';\r\n    const userApiBase = process.env.API_BASE;\r\n    const profileApiBase = process.env.API_BASE + '/profiles';\r\n    let access_token;\r\n\r\n    beforeEach(async () => {\r\n        await Profile.deleteMany();\r\n        await User.deleteMany();\r\n        await request(app)\r\n            .post(userApiBase + '/register')\r\n            .send({\r\n                username: 'myrdstom',\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            });\r\n        const res = await request(app)\r\n            .post(userApiBase + '/login')\r\n            .send({\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd'\r\n            })\r\n            .expect(200);\r\n        access_token = res.body.token;\r\n    });\r\n    afterAll(async done => {\r\n        await mongoose.connection.close(done);\r\n    });\r\n    it('Should create a user profile', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                bio: 'I am an awesome developer',\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                youtube: 'https://www.youtube.com/',\r\n                instagram: 'https://www.instagram.com/',\r\n                twitter: 'https://www.twitter.com/',\r\n                avatar: 'https://www.avatar.com/'\r\n            })\r\n            .expect(201);\r\n        expect(response.body.bio).toBe('I am an awesome developer');\r\n    });\r\n\r\n    it('Should get a created user profile', async () => {\r\n        await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                bio: 'I am an awesome developer',\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                youtube: 'https://www.youtube.com/',\r\n                instagram: 'https://www.instagram.com/',\r\n                twitter: 'https://www.twitter.com/',\r\n                avatar: 'https://www.avatar.com/'\r\n            })\r\n            .expect(201);\r\n        const response = await request(app)\r\n            .get(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .expect(200);\r\n        expect(response.body.bio).toBe('I am an awesome developer');\r\n    });\r\n    it('Should return an error when you try to get a  user profile with none created', async () => {\r\n        const response = await request(app)\r\n            .get(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .expect(404);\r\n        expect(response.body.error).toBe('There is no profile for this user');\r\n    });\r\n});\r\n"],"file":"profile.test.js"}