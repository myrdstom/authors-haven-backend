{"version":3,"sources":["../../../../../src/tests/routes/api/users/users.test.js"],"names":["request","require","describe","process","env","API_BASE","apiBase","beforeEach","User","deleteMany","app","post","send","username","email","password","confirmPassword","afterAll","done","mongoose","connection","close","it","expect","response","body","user","toBe","success","res","access_token","token","get","set"],"mappings":"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","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../../index'\r\nimport User from '../../../../models/User';\r\nimport 'mongoose';\r\n\r\ndescribe('Tests for user registration', () => {\r\n    process.env.API_BASE = '/api';\r\n    const apiBase = process.env.API_BASE;\r\n\r\n    beforeEach(async () => {\r\n        await User.deleteMany();\r\n        await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                username: 'myrdstom',\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            });\r\n    });\r\n    afterAll(done => {\r\n        mongoose.connection.close(done);\r\n    });\r\n\r\n\r\n    it('Should sign-up a new user', async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                username: 'bgpeter',\r\n                email: 'peter@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            })\r\n            .expect(201);\r\n        expect(response.body.user.email).toBe('peter@gmail.com');\r\n    });\r\n\r\n    it('Should return an error if the user registers with an existing email', async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                username: 'bgpeter',\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            })\r\n            .expect(400);\r\n        expect(response.body.email[0]).toBe('Email already exists');\r\n    });\r\n\r\n    it('Should log in a registered user', async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/login')\r\n            .send({\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n            })\r\n            .expect(200);\r\n        expect(response.body.success).toBe(true);\r\n    });\r\n    it('Should return the logged in user ', async () => {\r\n        const res = await request(app)\r\n            .post(apiBase + '/login')\r\n            .send({\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd'\r\n            })\r\n            .expect(200);\r\n        const access_token = res.body.token;\r\n        const response = await request(app)\r\n            .get(apiBase + '/current')\r\n            .set('Authorization', `${access_token}`)\r\n            .expect(200);\r\n        expect(response.body.email).toBe('nserekopaul@gmail.com');\r\n    });\r\n});\r\n"],"file":"users.test.js"}