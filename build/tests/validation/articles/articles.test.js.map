{"version":3,"sources":["../../../../src/tests/validation/articles/articles.test.js"],"names":["request","require","mongoose","describe","process","env","API_BASE","userApiBase","articleApiBase","access_token","beforeEach","Article","deleteMany","User","app","post","send","username","email","password","confirmPassword","expect","res","body","token","afterAll","done","connection","close","it","set","title","description","response","toBe"],"mappings":";;AACA;;AACA;;AACA;;;;;;;;AAHA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAIA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAEAE,QAAQ,CAAC,kDAAD,EAAqD,YAAM;AAC/DC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;AACA,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYC,QAAhC;AACA,MAAME,cAAc,GAAGJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,WAA9C;AACA,MAAIG,YAAJ;AAEAC,EAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDC,oBAAQC,UAAR,EADC;;AAAA;AAAA;AAAA,mBAEDC,iBAAKD,UAAL,EAFC;;AAAA;AAAA;AAAA,mBAGDZ,OAAO,CAACc,iBAAD,CAAP,CACDC,IADC,CACIR,WAAW,GAAG,WADlB,EAEDS,IAFC,CAEI;AACFC,cAAAA,QAAQ,EAAE,UADR;AAEFC,cAAAA,KAAK,EAAE,uBAFL;AAGFC,cAAAA,QAAQ,EAAE,UAHR;AAIFC,cAAAA,eAAe,EAAE;AAJf,aAFJ,CAHC;;AAAA;AAAA;AAAA,mBAWWpB,OAAO,CAACc,iBAAD,CAAP,CACbC,IADa,CACRR,WAAW,GAAG,QADN,EAEbS,IAFa,CAER;AACFE,cAAAA,KAAK,EAAE,uBADL;AAEFC,cAAAA,QAAQ,EAAE;AAFR,aAFQ,EAMbE,MANa,CAMN,GANM,CAXX;;AAAA;AAWDC,YAAAA,GAXC;AAkBPb,YAAAA,YAAY,GAAGa,GAAG,CAACC,IAAJ,CAASC,KAAxB;;AAlBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAV;AAoBAC,EAAAA,QAAQ,CAAC,UAAAC,IAAI,EAAI;AACbxB,IAAAA,QAAQ,CAACyB,UAAT,CAAoBC,KAApB,CAA0BF,IAA1B;AACH,GAFO,CAAR;AAIAG,EAAAA,EAAE,CAAC,iGAAD;AAAA;AAAA;AAAA;AAAA,0BAAoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3E7B,OAAO,CAACc,iBAAD,CAAP,CAClBC,IADkB,CACbP,cAAc,GAAG,GADJ,EAElBsB,GAFkB,CAEd,eAFc,YAEMrB,YAFN,GAGlBO,IAHkB,CAGb;AAAEe,cAAAA,KAAK,EAAE,YAAT;AAAuBR,cAAAA,IAAI,EAAE,OAA7B;AAAsCS,cAAAA,WAAW,EAAE;AAAnD,aAHa,EAIlBX,MAJkB,CAIX,GAJW,CAD2E;;AAAA;AAC5FY,YAAAA,QAD4F;AAMlGZ,YAAAA,MAAM,CAACY,QAAQ,CAACV,IAAT,CAAcS,WAAd,CAA0B,CAA1B,CAAD,CAAN,CAAqCE,IAArC,CACI,8CADJ;;AANkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApG,GAAF,CA9B+D,CAwC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAlDO,CAAR","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../index';\r\nimport User from '../../../models/User';\r\nimport Article from '../../../models/Article';\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('Tests for validating the create articles feature', () => {\r\n    process.env.API_BASE = '/api';\r\n    const userApiBase = process.env.API_BASE;\r\n    const articleApiBase = process.env.API_BASE + '/articles';\r\n    let access_token;\r\n\r\n    beforeEach(async () => {\r\n        await Article.deleteMany();\r\n        await User.deleteMany();\r\n        await request(app)\r\n            .post(userApiBase + '/register')\r\n            .send({\r\n                username: 'myrdstom',\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            });\r\n        const res = await request(app)\r\n            .post(userApiBase + '/login')\r\n            .send({\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n            })\r\n            .expect(200);\r\n        access_token = res.body.token;\r\n    });\r\n    afterAll(done => {\r\n        mongoose.connection.close(done);\r\n    });\r\n\r\n    it('Should return an error when a user tries to create an article with an inappropriate description', async () => {\r\n        const response = await request(app)\r\n            .post(articleApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({ title: 'Javascript', body: 'narda', description: 'narda' })\r\n            .expect(400);\r\n        expect(response.body.description[0]).toBe(\r\n            'Description be between 10 and 100 characters'\r\n        );\r\n    });\r\n    // it('Should return an error when a user tries to create an article with an inappropriate title', async () => {\r\n    //     const response = await request(app)\r\n    //         .post(articleApiBase + '/')\r\n    //         .set('Authorization', `${access_token}`)\r\n    //         .send({ title: 'J', body: 'Javascript is amazing', description: 'Javascript is amazing' })\r\n    //         .expect(400);\r\n    //     expect(response.body.title[0]).toBe(\r\n    //         'Title must be between 2 and 30 characters'\r\n    //     );\r\n    // });\r\n});\r\n"],"file":"articles.test.js"}