{"version":3,"sources":["../../../../src/tests/validation/users/login.test.js"],"names":["request","require","mongoose","describe","process","env","API_BASE","apiBase","beforeEach","User","deleteMany","app","post","send","email","password","confirmPassword","afterAll","done","connection","close","it","expect","response","body","toBe"],"mappings":"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","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../index';\r\nimport User from '../../../models/User'\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('Tests for validating the login data', () => {\r\n  process.env.API_BASE = '/api';\r\n  const apiBase = process.env.API_BASE;\r\n\r\n  beforeEach(async () => {\r\n    await User.deleteMany();\r\n    await request(app)\r\n      .post(apiBase + '/register')\r\n      .send({\r\n        email: 'nserekopaul@gmail.com',\r\n        password: 'P@ssw0rd',\r\n        confirmPassword: 'P@ssw0rd',\r\n      });\r\n  });\r\n  afterAll(async done => {\r\n    mongoose.connection.close(done);\r\n  });\r\n\r\n  it('Should return an error when a user tries to login  with an invalid email', async () => {\r\n    const response = await request(app)\r\n      .post(apiBase + '/login')\r\n      .send({\r\n        email: 'paul',\r\n        password: 'password'\r\n      })\r\n      .expect(400);\r\n    expect(response.body.email[0]).toBe('Email is invalid');\r\n  });\r\n\r\n  it('Should return an error when a user tries to login  without a password', async () => {\r\n    const response = await request(app)\r\n      .post(apiBase + '/login')\r\n      .send({\r\n        email: 'paul'\r\n      })\r\n      .expect(400);\r\n    expect(response.body.password[0]).toBe('Password is required');\r\n  });\r\n\r\n  it('Should return an error when a user tries to login  with non-existent credentials', async () => {\r\n    const response = await request(app)\r\n      .post(apiBase + '/login')\r\n      .send({\r\n        email: 'jlule@gmail.com',\r\n        password: 'password'\r\n      })\r\n      .expect(404);\r\n    expect(response.body.email).toBe('User not found');\r\n  });\r\n});\r\n"],"file":"login.test.js"}