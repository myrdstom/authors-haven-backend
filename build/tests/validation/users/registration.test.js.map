{"version":3,"sources":["../../../../src/tests/validation/users/registration.test.js"],"names":["request","require","mongoose","describe","process","env","API_BASE","apiBase","beforeEach","User","deleteMany","afterAll","done","connection","close","it","app","post","send","email","password","confirmPassword","expect","response","body","username","toBe"],"mappings":"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","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../index';\r\nimport User from '../../../models/User';\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('Tests for validating the user registration data', () => {\r\n    process.env.API_BASE = '/api';\r\n    const apiBase = process.env.API_BASE ;\r\n\r\n    beforeEach(async () => {\r\n        await User.deleteMany();\r\n    });\r\n    afterAll(async done => {\r\n        await mongoose.connection.close(done);\r\n    });\r\n\r\n\r\n    it('Should return an error when a user tries to register  without a username', async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                email: 'nserekopaull@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            })\r\n            .expect(400);\r\n        expect(response.body.username[0]).toBe(\r\n            'Username is required'\r\n        );\r\n    });\r\n    it(\"Should return an error when a user tries to register  with an invalid 'email' field\", async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                email: 'email',\r\n                username:'username',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            })\r\n            .expect(400);\r\n        expect(response.body.email[0]).toBe('Email is invalid');\r\n    });\r\n    it(\"Should return an error when a user tries to register  with an empty 'password' field\", async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                email: 'email@gmail.com',\r\n                password: '',\r\n                username:'username',\r\n            })\r\n            .expect(400);\r\n        expect(response.body.password[0]).toBe('Password is required');\r\n    });\r\n    it(\"Should return an error when a user tries to register  with the'password' and 'confirmPassword' fields not matching\", async () => {\r\n        const response = await request(app)\r\n            .post(apiBase + '/register')\r\n            .send({\r\n                email: 'email@gmail.com',\r\n                username:'username',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: '',\r\n            })\r\n            .expect(400);\r\n        expect(response.body.confirmPassword[0]).toBe('Passwords must match');\r\n    });\r\n\r\n});\r\n"],"file":"registration.test.js"}