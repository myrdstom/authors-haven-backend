{"version":3,"sources":["../../../../src/tests/validation/profiles/profiles.test.js"],"names":["request","require","mongoose","describe","process","env","API_BASE","userApiBase","profileApiBase","access_token","beforeEach","Profile","deleteMany","User","app","post","send","username","email","password","confirmPassword","expect","res","body","token","afterAll","done","connection","close","it","set","firstName","lastName","youtube","response","toBe","twitter","instagram","avatar"],"mappings":"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","sourcesContent":["const request = require('supertest');\r\nimport app from '../../../index';\r\nimport Profile from '../../../models/Profile';\r\nimport User from '../../../models/User';\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('Tests for validating the user profile feature', () => {\r\n    process.env.API_BASE = '/api';\r\n    const userApiBase = process.env.API_BASE;\r\n    const profileApiBase = process.env.API_BASE + '/profiles';\r\n    let access_token;\r\n\r\n    beforeEach(async () => {\r\n        await Profile.deleteMany();\r\n        await User.deleteMany();\r\n        await request(app)\r\n            .post(userApiBase + '/register')\r\n            .send({\r\n                username:'myrdstom',\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd',\r\n                confirmPassword: 'P@ssw0rd',\r\n            });\r\n       const res = await request(app)\r\n            .post(userApiBase + '/login')\r\n            .send({\r\n                email: 'nserekopaul@gmail.com',\r\n                password: 'P@ssw0rd'\r\n            })\r\n            .expect(200);\r\n        access_token = res.body.token;\r\n    });\r\n    afterAll(async done => {\r\n        await mongoose.connection.close(done);\r\n    });\r\n\r\n    it('Should return an error when a user tries to create a profile when the youtube field is not a URL', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                youtube:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.youtube[0]).toBe('Youtube field doe not have a valid URL');\r\n    });\r\n\r\n    it('Should return an error when a user tries to create a profile when the twitter field is not a URL', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                twitter:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.twitter[0]).toBe('Twitter field doe not have a valid URL');\r\n    });\r\n\r\n    it('Should return an error when a user tries to create a profile when the instagram field is not a URL', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                instagram:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.instagram[0]).toBe('Instagram field doe not have a valid URL');\r\n    });\r\n\r\n    it('Should return an error when a user tries to create a profile when the avatar field is not a URL', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: 'Paul',\r\n                lastName: 'Kayongo',\r\n                avatar:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.avatar[0]).toBe('Avatar field doe not have a valid URL');\r\n    });\r\n\r\n    it('Should return an error when the firstName is empty', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: '',\r\n                lastName: 'Kayongo',\r\n                youtube:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.firstName[0]).toBe('First name must be between 2 and 30 characters');\r\n    });\r\n    it('Should return an error when the lastName is empty', async () => {\r\n        const response = await request(app)\r\n            .post(profileApiBase + '/')\r\n            .set('Authorization', `${access_token}`)\r\n            .send({\r\n                firstName: 'Paul',\r\n                lastName: '',\r\n                youtube:'yoyo'\r\n            })\r\n            .expect(400);\r\n        expect(response.body.lastName[0]).toBe('Last name must be between 2 and 30 characters');\r\n    });\r\n});\r\n"],"file":"profiles.test.js"}