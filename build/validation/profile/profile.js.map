{"version":3,"sources":["../../../src/validation/profile/profile.js"],"names":["Validator","require","isEmpty","module","exports","validateProfileInput","data","errors","firstName","lastName","isLength","min","max","youtube","isURL","twitter","instagram","avatar","isValid"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB,C,CACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACjD,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,IAAI,CAACE,SAAL,GAAiB,CAACN,OAAO,CAACI,IAAI,CAACE,SAAN,CAAR,GAA2BF,IAAI,CAACE,SAAhC,GAA4C,EAA7D;AACAF,EAAAA,IAAI,CAACG,QAAL,GAAgB,CAACP,OAAO,CAACI,IAAI,CAACG,QAAN,CAAR,GAA0BH,IAAI,CAACG,QAA/B,GAA0C,EAA1D;;AAEA,MAAI,CAACT,SAAS,CAACU,QAAV,CAAmBJ,IAAI,CAACE,SAAxB,EAAmC;AAAEG,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAAnC,CAAL,EAA8D;AAC1DL,IAAAA,MAAM,CAACC,SAAP,GAAmB,CAAC,gDAAD,CAAnB;AACH;;AACD,MAAI,CAACR,SAAS,CAACU,QAAV,CAAmBJ,IAAI,CAACG,QAAxB,EAAkC;AAAEE,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAAlC,CAAL,EAA6D;AACzDL,IAAAA,MAAM,CAACE,QAAP,GAAkB,CAAC,+CAAD,CAAlB;AACH;;AAED,MAAI,CAACP,OAAO,CAACI,IAAI,CAACO,OAAN,CAAZ,EAA4B;AACxB,QAAI,CAACb,SAAS,CAACc,KAAV,CAAgBR,IAAI,CAACO,OAArB,CAAL,EAAoC;AAChCN,MAAAA,MAAM,CAACM,OAAP,GAAiB,CAAC,wCAAD,CAAjB;AACH;AACJ;;AACD,MAAI,CAACX,OAAO,CAACI,IAAI,CAACS,OAAN,CAAZ,EAA4B;AACxB,QAAI,CAACf,SAAS,CAACc,KAAV,CAAgBR,IAAI,CAACS,OAArB,CAAL,EAAoC;AAChCR,MAAAA,MAAM,CAACQ,OAAP,GAAiB,CAAC,wCAAD,CAAjB;AACH;AACJ;;AACD,MAAI,CAACb,OAAO,CAACI,IAAI,CAACU,SAAN,CAAZ,EAA8B;AAC1B,QAAI,CAAChB,SAAS,CAACc,KAAV,CAAgBR,IAAI,CAACU,SAArB,CAAL,EAAsC;AAClCT,MAAAA,MAAM,CAACS,SAAP,GAAmB,CAAC,0CAAD,CAAnB;AACH;AACJ;;AACD,MAAI,CAACd,OAAO,CAACI,IAAI,CAACW,MAAN,CAAZ,EAA2B;AACvB,QAAI,CAACjB,SAAS,CAACc,KAAV,CAAgBR,IAAI,CAACW,MAArB,CAAL,EAAmC;AAC/BV,MAAAA,MAAM,CAACU,MAAP,GAAgB,CAAC,uCAAD,CAAhB;AACH;AACJ;;AAED,SAAO;AACHV,IAAAA,MAAM,EAANA,MADG;AAEHW,IAAAA,OAAO,EAAEhB,OAAO,CAACK,MAAD;AAFb,GAAP;AAIH,CArCD","sourcesContent":["const Validator = require('validator');\r\nconst isEmpty = require('../isEmpty');\r\n// Validator library only works with string so so magic goes into making it work with non string types\r\n\r\nmodule.exports = function validateProfileInput(data) {\r\n    let errors = {};\r\n    data.firstName = !isEmpty(data.firstName) ? data.firstName : '';\r\n    data.lastName = !isEmpty(data.lastName) ? data.lastName : '';\r\n\r\n    if (!Validator.isLength(data.firstName, { min: 2, max: 30 })) {\r\n        errors.firstName = ['First name must be between 2 and 30 characters'];\r\n    }\r\n    if (!Validator.isLength(data.lastName, { min: 2, max: 30 })) {\r\n        errors.lastName = ['Last name must be between 2 and 30 characters'];\r\n    }\r\n\r\n    if (!isEmpty(data.youtube)) {\r\n        if (!Validator.isURL(data.youtube)) {\r\n            errors.youtube = ['Youtube field doe not have a valid URL'];\r\n        }\r\n    }\r\n    if (!isEmpty(data.twitter)) {\r\n        if (!Validator.isURL(data.twitter)) {\r\n            errors.twitter = ['Twitter field doe not have a valid URL'];\r\n        }\r\n    }\r\n    if (!isEmpty(data.instagram)) {\r\n        if (!Validator.isURL(data.instagram)) {\r\n            errors.instagram = ['Instagram field doe not have a valid URL'];\r\n        }\r\n    }\r\n    if (!isEmpty(data.avatar)) {\r\n        if (!Validator.isURL(data.avatar)) {\r\n            errors.avatar = ['Avatar field doe not have a valid URL'];\r\n        }\r\n    }\r\n\r\n    return {\r\n        errors,\r\n        isValid: isEmpty(errors),\r\n    };\r\n};\r\n"],"file":"profile.js"}